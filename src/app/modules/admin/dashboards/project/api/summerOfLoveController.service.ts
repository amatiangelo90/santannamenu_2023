/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import {Observable} from "rxjs";
import { EmailSenderResponse } from '../model/emailSenderResponse';
import { EventBooking } from '../model/eventBooking';
import { SummerDetails } from '../model/summerDetails';
import { WhatAppSendMessageResponse } from '../model/whatAppSendMessageResponse';
import { WhatsappOtpResponse } from '../model/whatsappOtpResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({providedIn: 'root'})
export class SummerOfLoveControllerService {

    protected basePath = 'https://servicedbacorp741w.com:8444/santannaservice';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * confirmReservation
     *
     * @param code code
     * @param note note
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmReservationUsingPUT(code?: string, note?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public confirmReservationUsingPUT(code?: string, note?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public confirmReservationUsingPUT(code?: string, note?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public confirmReservationUsingPUT(code?: string, note?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (note !== undefined && note !== null) {
            queryParameters = queryParameters.set('note', <any>note);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/v1/summeroflove/confirmReservation`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete
     *
     * @param eventBooking eventBooking
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE2(eventBooking?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUsingDELETE2(eventBooking?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUsingDELETE2(eventBooking?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUsingDELETE2(eventBooking?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventBooking !== undefined && eventBooking !== null) {
            queryParameters = queryParameters.set('eventBooking', <any>eventBooking);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/v1/summeroflove/deletereservation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDetails
     *
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDetailsUsingGET(phone?: string, observe?: 'body', reportProgress?: boolean): Observable<SummerDetails>;
    public getDetailsUsingGET(phone?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SummerDetails>>;
    public getDetailsUsingGET(phone?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SummerDetails>>;
    public getDetailsUsingGET(phone?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<SummerDetails>(`${this.basePath}/api/v1/summeroflove/getalldetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * resendMessagFromWhatsapp
     *
     * @param phoneNumber phoneNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resendMessagFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<WhatAppSendMessageResponse>;
    public resendMessagFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WhatAppSendMessageResponse>>;
    public resendMessagFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WhatAppSendMessageResponse>>;
    public resendMessagFromWhatsappUsingPOST(phoneNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<WhatAppSendMessageResponse>(`${this.basePath}/api/v1/summeroflove/whatsapp/resendmessage`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieveReservationByEmail
     *
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveReservationByEmailUsingGET(email?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventBooking>>;
    public retrieveReservationByEmailUsingGET(email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventBooking>>>;
    public retrieveReservationByEmailUsingGET(email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventBooking>>>;
    public retrieveReservationByEmailUsingGET(email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EventBooking>>(`${this.basePath}/api/v1/summeroflove/findreservationbyemail`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieveReservationByPhone
     *
     * @param phone phone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveReservationByPhoneUsingGET(phone?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventBooking>>;
    public retrieveReservationByPhoneUsingGET(phone?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventBooking>>>;
    public retrieveReservationByPhoneUsingGET(phone?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventBooking>>>;
    public retrieveReservationByPhoneUsingGET(phone?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EventBooking>>(`${this.basePath}/api/v1/summeroflove/findreservationbyphone`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retriveAll
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retriveAllUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<EventBooking>>;
    public retriveAllUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventBooking>>>;
    public retriveAllUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventBooking>>>;
    public retriveAllUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EventBooking>>(`${this.basePath}/api/v1/summeroflove/retrieveallreservations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save
     *
     * @param eventBookingId
     * @param code
     * @param name
     * @param prefix
     * @param phone
     * @param email
     * @param reservationDate
     * @param accomodation
     * @param typeAccomodation
     * @param note
     * @param guests
     * @param pr
     * @param confirmed
     * @param arrived
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveUsingPOST2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EventBooking>;
    public saveUsingPOST2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventBooking>>;
    public saveUsingPOST2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventBooking>>;
    public saveUsingPOST2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventBookingId !== undefined && eventBookingId !== null) {
            queryParameters = queryParameters.set('eventBookingId', <any>eventBookingId);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (prefix !== undefined && prefix !== null) {
            queryParameters = queryParameters.set('prefix', <any>prefix);
        }
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (reservationDate !== undefined && reservationDate !== null) {
            queryParameters = queryParameters.set('reservationDate', <any>reservationDate);
        }
        if (accomodation !== undefined && accomodation !== null) {
            queryParameters = queryParameters.set('accomodation', <any>accomodation);
        }
        if (typeAccomodation !== undefined && typeAccomodation !== null) {
            queryParameters = queryParameters.set('typeAccomodation', <any>typeAccomodation);
        }
        if (note !== undefined && note !== null) {
            queryParameters = queryParameters.set('note', <any>note);
        }
        if (guests !== undefined && guests !== null) {
            queryParameters = queryParameters.set('guests', <any>guests);
        }
        if (pr !== undefined && pr !== null) {
            queryParameters = queryParameters.set('pr', <any>pr);
        }
        if (confirmed !== undefined && confirmed !== null) {
            queryParameters = queryParameters.set('confirmed', <any>confirmed);
        }
        if (arrived !== undefined && arrived !== null) {
            queryParameters = queryParameters.set('arrived', <any>arrived);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<EventBooking>(`${this.basePath}/api/v1/summeroflove/makereservation`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendEmail
     *
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendEmailUsingPOST(email?: string, observe?: 'body', reportProgress?: boolean): Observable<EmailSenderResponse>;
    public sendEmailUsingPOST(email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmailSenderResponse>>;
    public sendEmailUsingPOST(email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmailSenderResponse>>;
    public sendEmailUsingPOST(email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<EmailSenderResponse>(`${this.basePath}/api/v1/summeroflove/registration/email/sendotp`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendEventDetails
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendEventDetailsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sendEventDetailsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sendEventDetailsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sendEventDetailsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/summeroflove/sendEventDetails`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendMessagFromWhatsapp
     *
     * @param phoneNumber phoneNumber
     * @param message message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMessagFromWhatsappUsingPOST(phoneNumber?: string, message?: string, observe?: 'body', reportProgress?: boolean): Observable<WhatAppSendMessageResponse>;
    public sendMessagFromWhatsappUsingPOST(phoneNumber?: string, message?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WhatAppSendMessageResponse>>;
    public sendMessagFromWhatsappUsingPOST(phoneNumber?: string, message?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WhatAppSendMessageResponse>>;
    public sendMessagFromWhatsappUsingPOST(phoneNumber?: string, message?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
        }
        if (message !== undefined && message !== null) {
            queryParameters = queryParameters.set('message', <any>message);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<WhatAppSendMessageResponse>(`${this.basePath}/api/v1/summeroflove/whatsapp/sendmessage`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendOtpCodeFromWhatsapp
     *
     * @param phoneNumber phoneNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendOtpCodeFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<WhatsappOtpResponse>;
    public sendOtpCodeFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WhatsappOtpResponse>>;
    public sendOtpCodeFromWhatsappUsingPOST(phoneNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WhatsappOtpResponse>>;
    public sendOtpCodeFromWhatsappUsingPOST(phoneNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<WhatsappOtpResponse>(`${this.basePath}/api/v1/summeroflove/registration/whatsapp/sendotp`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateByCustomer
     *
     * @param eventBookingId
     * @param code
     * @param name
     * @param prefix
     * @param phone
     * @param email
     * @param reservationDate
     * @param accomodation
     * @param typeAccomodation
     * @param note
     * @param guests
     * @param pr
     * @param confirmed
     * @param arrived
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateByCustomerUsingPUT(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateByCustomerUsingPUT(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateByCustomerUsingPUT(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateByCustomerUsingPUT(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventBookingId !== undefined && eventBookingId !== null) {
            queryParameters = queryParameters.set('eventBookingId', <any>eventBookingId);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (prefix !== undefined && prefix !== null) {
            queryParameters = queryParameters.set('prefix', <any>prefix);
        }
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (reservationDate !== undefined && reservationDate !== null) {
            queryParameters = queryParameters.set('reservationDate', <any>reservationDate);
        }
        if (accomodation !== undefined && accomodation !== null) {
            queryParameters = queryParameters.set('accomodation', <any>accomodation);
        }
        if (typeAccomodation !== undefined && typeAccomodation !== null) {
            queryParameters = queryParameters.set('typeAccomodation', <any>typeAccomodation);
        }
        if (note !== undefined && note !== null) {
            queryParameters = queryParameters.set('note', <any>note);
        }
        if (guests !== undefined && guests !== null) {
            queryParameters = queryParameters.set('guests', <any>guests);
        }
        if (pr !== undefined && pr !== null) {
            queryParameters = queryParameters.set('pr', <any>pr);
        }
        if (confirmed !== undefined && confirmed !== null) {
            queryParameters = queryParameters.set('confirmed', <any>confirmed);
        }
        if (arrived !== undefined && arrived !== null) {
            queryParameters = queryParameters.set('arrived', <any>arrived);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/v1/summeroflove/updatereservationbycustomer`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingDELETE(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUsingDELETE(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUsingDELETE(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUsingDELETE(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/v1/summeroflove/deleteallreservation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     *
     * @param eventBookingId
     * @param code
     * @param name
     * @param prefix
     * @param phone
     * @param email
     * @param reservationDate
     * @param accomodation
     * @param typeAccomodation
     * @param note
     * @param guests
     * @param pr
     * @param confirmed
     * @param arrived
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPUT2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUsingPUT2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUsingPUT2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUsingPUT2(eventBookingId?: number, code?: string, name?: string, prefix?: string, phone?: string, email?: string, reservationDate?: string, accomodation?: string, typeAccomodation?: number, note?: string, guests?: number, pr?: string, confirmed?: boolean, arrived?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eventBookingId !== undefined && eventBookingId !== null) {
            queryParameters = queryParameters.set('eventBookingId', <any>eventBookingId);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (prefix !== undefined && prefix !== null) {
            queryParameters = queryParameters.set('prefix', <any>prefix);
        }
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (reservationDate !== undefined && reservationDate !== null) {
            queryParameters = queryParameters.set('reservationDate', <any>reservationDate);
        }
        if (accomodation !== undefined && accomodation !== null) {
            queryParameters = queryParameters.set('accomodation', <any>accomodation);
        }
        if (typeAccomodation !== undefined && typeAccomodation !== null) {
            queryParameters = queryParameters.set('typeAccomodation', <any>typeAccomodation);
        }
        if (note !== undefined && note !== null) {
            queryParameters = queryParameters.set('note', <any>note);
        }
        if (guests !== undefined && guests !== null) {
            queryParameters = queryParameters.set('guests', <any>guests);
        }
        if (pr !== undefined && pr !== null) {
            queryParameters = queryParameters.set('pr', <any>pr);
        }
        if (confirmed !== undefined && confirmed !== null) {
            queryParameters = queryParameters.set('confirmed', <any>confirmed);
        }
        if (arrived !== undefined && arrived !== null) {
            queryParameters = queryParameters.set('arrived', <any>arrived);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/v1/summeroflove/updatereservation`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
